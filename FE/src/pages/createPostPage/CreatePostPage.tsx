import { useState, FormEvent, ChangeEvent } from "react"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏ useState, FormEvent –∏ ChangeEvent –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ React.
import { useSelector } from "react-redux"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫ useSelector –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ React Redux.
import { RootState } from "../../store/store"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø RootState –∏–∑ —Ñ–∞–π–ª–∞ store.
import { toast } from "react-toastify"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Toast –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ react-toastify.
import "react-toastify/dist/ReactToastify.css"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è Toast.
import styles from "./createPostPage.module.css"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ CSS –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
import { $api } from "../../api/api"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç $api –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API.

interface ImageFormProps { // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ CreatePostPage.
  onClose: () => void; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞.
}

export const CreatePostPage: React.FC<ImageFormProps> = ({ onClose }) => { // –û–±—ä—è–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç CreatePostPage —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π.
  const [selectedFile, setSelectedFile] = useState<File | null>(null); // –•—É–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
  const [previewUrl, setPreviewUrl] = useState(""); // –•—É–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è URL –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
  const [caption, setCaption] = useState(""); // –•—É–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å—Ç–∞.
  const [isEmojiVisible, setIsEmojiVisible] = useState(false); // –•—É–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ–¥–∑–∏.
  const [uploading, setUploading] = useState(false); // –•—É–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
  const charCount = caption.length; // –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ.

  const emojiList = [
    ...Array.from({ length: 300 }, (_, i) => String.fromCodePoint(0x1f600 + i)), // –†–∞—Å—à–∏—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä —ç–º–æ–¥–∑–∏.
    ...Array.from({ length: 20 }, (_, i) => String.fromCodePoint(0x2700 + i)), // –î–æ–±–∞–≤–ª—è–µ—Ç –¥—Ä—É–≥–∏–µ —ç–º–æ–¥–∑–∏ (—Å–∏–º–≤–æ–ª—ã).
    ...Array.from({ length: 20 }, (_, i) => String.fromCodePoint(0x1f300 + i)), // –î–æ–±–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ —ç–º–æ–¥–∑–∏ (–ø–æ–≥–æ–¥–∞ –∏ —Ç.–ø.).
    ...Array.from({ length: 20 }, (_, i) => String.fromCodePoint(0x1f600 + i)), // –î–æ–±–∞–≤–ª—è–µ—Ç –µ—â—ë —ç–º–æ–¥–∑–∏.
    // –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
  ];

  const currentUser = useSelector((state: RootState) => state.auth.user); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redux.

  const handleFileSelection = (e: ChangeEvent<HTMLInputElement>) => { // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞.
    if (e.target.files && e.target.files.length > 0) {
      setSelectedFile(e.target.files[0]);
      setPreviewUrl(URL.createObjectURL(e.target.files[0]));
    }
  };

  const handleFormSubmit = async (e: FormEvent) => { // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.
    e.preventDefault();

    if (!selectedFile && !previewUrl) {
      toast.error("Please upload an image or provide a URL");
      return;
    }

    if (!currentUser) {
      toast.error("User not found. Please log in again.");
      return;
    }

    const formData = new FormData();
    if (selectedFile) {
      formData.append("photo", selectedFile);
    } else {
      formData.append("photo", previewUrl);
    }
    formData.append("content", caption.trim());
    formData.append("userId", currentUser._id);

    setUploading(true);
    toast.info("Uploading...");

    try {
      const response = await $api.post("/posts/create", formData, {
        headers: { "Content-Type": "multipart/form-data" },
      });

      setPreviewUrl(response.data.post.photo);
      toast.success("Post uploaded successfully!");

      setCaption("");
      setSelectedFile(null);
      setPreviewUrl("");
      setUploading(false);

      setTimeout(onClose, 3000);
    } catch (error) {
      console.error("Upload error:", error);
      toast.error("Upload failed. Try again.");
      setUploading(false);
    }
  };

  const toggleEmojiPicker = () => { // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–º–æ–¥–∑–∏.
    setIsEmojiVisible((prev) => !prev);
  };

  const handleOverlayClick = (e: React.MouseEvent<HTMLDivElement>) => { // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –æ–≤–µ—Ä–ª–µ—é.
    if ((e.target as HTMLDivElement).classList.contains(styles.modal)) {
      onClose();
    }
  };

  return (
    <div className={styles.modal} onClick={handleOverlayClick}> {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      <form onSubmit={handleFormSubmit} className={styles.formContainer} onClick={(e) => e.stopPropagation()}>
        <div className={styles.header}>
          <h1 className={styles.title}>Create new post</h1>
          <button type="submit" className={styles.submitButton} disabled={uploading}>
            {uploading ? "Uploading..." : "Share"}
          </button>
        </div>

        <div className={styles.contentWrapper}>
          <div className={styles.fileInputContainer}>
            <label htmlFor="fileInput" className={styles.uploadLabel}>
              <img src={previewUrl || "/src/assets/place-create.svg"} alt="Preview" className={styles.uploadIcon} /> {/* –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
            </label>
            <input id="fileInput" type="file" accept="image/*" className={styles.fileInput} onChange={handleFileSelection} /> {/* –í–≤–æ–¥ —Ñ–∞–π–ª–∞ */}
          </div>

          <div className={styles.detailsSection}>
            {currentUser && (
              <div className={styles.userInfo}>
                <span className={styles.placeholderImg}>
                  <img src={currentUser.profile_image} alt={currentUser.username} className={styles.userAvatar} /> {/* –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                </span>
                <span className={styles.username}>{currentUser.username}</span>
              </div>
            )}

            <textarea
              placeholder="Describe your post"
              value={caption}
              onChange={(e) => setCaption(e.target.value)}
              rows={4}
              className={styles.textArea}
            />
            <span className={styles.charCounter}>{`${charCount} / 150`}</span> {/* –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ */}

            <div className={styles.emojiContainer}>
              <button type="button" className={styles.emojiButton} onClick={toggleEmojiPicker}>
                üòä
              </button>
              {isEmojiVisible && (
                <div className={styles.emojiList}>
                  {emojiList.map((emoji, index) => ( // –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏.
                    <span key={index} className={styles.emojiItem} onClick={() => setCaption((prev) => prev + emoji)}>
                      {emoji}
                    </span>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </form>
    </div>
  );
};
